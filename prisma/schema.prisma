generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model billing {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  invoice_amount Int?
  sales_summary  String?
  notes          String?
  user_id        String?  @db.Uuid
  user           user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model inventory {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_name      String             @db.VarChar(255)
  status           String             @db.VarChar(255)
  organization_id  String?            @db.Uuid
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  organization     organization?      @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchase_history purchase_history[]
  sale             sale[]
}

model organization {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?     @db.VarChar(255)
  name        String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_id     String      @db.Uuid
  tenant_id   String      @db.VarChar(255)
  inventory   inventory[]
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model purchase_history {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id String?    @db.Uuid
  device_id   String?    @db.Uuid
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user        user?      @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory   inventory? @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sale {
  id                                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id                          String?    @db.Uuid
  customer_id                        String?    @db.Uuid
  sales_associate_id                 String?    @db.Uuid
  created_at                         DateTime   @default(now()) @db.Timestamp(6)
  updated_at                         DateTime   @default(now()) @db.Timestamp(6)
  user_sale_customer_idTouser        user?      @relation("sale_customer_idTouser", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory                          inventory? @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_sale_sales_associate_idTouser user?      @relation("sale_sales_associate_idTouser", fields: [sales_associate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                              String             @unique @db.VarChar(255)
  firstName                          String?            @db.VarChar(255)
  lastName                           String?            @db.VarChar(255)
  roq_user_id                        String             @db.VarChar(255)
  tenant_id                          String             @db.VarChar(255)
  created_at                         DateTime           @default(now()) @db.Timestamp(6)
  updated_at                         DateTime           @default(now()) @db.Timestamp(6)
  billing                            billing[]
  organization                       organization[]
  purchase_history                   purchase_history[]
  sale_sale_customer_idTouser        sale[]             @relation("sale_customer_idTouser")
  sale_sale_sales_associate_idTouser sale[]             @relation("sale_sales_associate_idTouser")
}
